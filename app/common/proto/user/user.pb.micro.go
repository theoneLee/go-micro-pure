// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserAndNews service

type UserAndNewsService interface {
	SaveUser(ctx context.Context, in *UserReq, opts ...client.CallOption) (*UserResp, error)
	GetUser(ctx context.Context, in *UserReq, opts ...client.CallOption) (*UserResp, error)
	SaveNotice(ctx context.Context, in *NoticeReq, opts ...client.CallOption) (*NoticeResp, error)
}

type userAndNewsService struct {
	c    client.Client
	name string
}

func NewUserAndNewsService(name string, c client.Client) UserAndNewsService {
	return &userAndNewsService{
		c:    c,
		name: name,
	}
}

func (c *userAndNewsService) SaveUser(ctx context.Context, in *UserReq, opts ...client.CallOption) (*UserResp, error) {
	req := c.c.NewRequest(c.name, "UserAndNews.SaveUser", in)
	out := new(UserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAndNewsService) GetUser(ctx context.Context, in *UserReq, opts ...client.CallOption) (*UserResp, error) {
	req := c.c.NewRequest(c.name, "UserAndNews.GetUser", in)
	out := new(UserResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAndNewsService) SaveNotice(ctx context.Context, in *NoticeReq, opts ...client.CallOption) (*NoticeResp, error) {
	req := c.c.NewRequest(c.name, "UserAndNews.SaveNotice", in)
	out := new(NoticeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAndNews service

type UserAndNewsHandler interface {
	SaveUser(context.Context, *UserReq, *UserResp) error
	GetUser(context.Context, *UserReq, *UserResp) error
	SaveNotice(context.Context, *NoticeReq, *NoticeResp) error
}

func RegisterUserAndNewsHandler(s server.Server, hdlr UserAndNewsHandler, opts ...server.HandlerOption) error {
	type userAndNews interface {
		SaveUser(ctx context.Context, in *UserReq, out *UserResp) error
		GetUser(ctx context.Context, in *UserReq, out *UserResp) error
		SaveNotice(ctx context.Context, in *NoticeReq, out *NoticeResp) error
	}
	type UserAndNews struct {
		userAndNews
	}
	h := &userAndNewsHandler{hdlr}
	return s.Handle(s.NewHandler(&UserAndNews{h}, opts...))
}

type userAndNewsHandler struct {
	UserAndNewsHandler
}

func (h *userAndNewsHandler) SaveUser(ctx context.Context, in *UserReq, out *UserResp) error {
	return h.UserAndNewsHandler.SaveUser(ctx, in, out)
}

func (h *userAndNewsHandler) GetUser(ctx context.Context, in *UserReq, out *UserResp) error {
	return h.UserAndNewsHandler.GetUser(ctx, in, out)
}

func (h *userAndNewsHandler) SaveNotice(ctx context.Context, in *NoticeReq, out *NoticeResp) error {
	return h.UserAndNewsHandler.SaveNotice(ctx, in, out)
}
